services:
  backend:
    build:
      context: .
      dockerfile: infrastructure/express/Dockerfile
      target: production
    # use it on development only
    # ports:
    #   - 3000:3000/tcp  
    environment:
      - NODE_ENV=production
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
    env_file:
      - .env

  frontend:
    build:
      context: ./infrastructure/front/vue
      dockerfile: Dockerfile
      target: production
    # use it on development only
    # ports:
    #   - 8080:80/tcp
    depends_on:
      - backend

  cobalt-api:
      image: ghcr.io/imputnet/cobalt:11

      init: true
      read_only: true
      restart: unless-stopped
      container_name: cobalt-api
      # development only
      environment:
          # replace https://api.url.example/ with your instance's url
          # or else tunneling functionality won't work properly
          API_URL: ${BACKEND_URL}
          # if you want to use cookies for fetching data from services,
          # uncomment the next line & volumes section
          # COOKIE_PATH: "/cookies.json"

          # it's recommended to configure bot protection or api keys if the instance is public,
          # see /docs/protect-an-instance.md for more info

          # see /docs/run-an-instance.md for more variables that you can use here

      labels:
          - com.centurylinklabs.watchtower.scope=cobalt
      depends_on:
      - backend     
      # uncomment only if you use the COOKIE_PATH variable
    

  # watchtower updates the cobalt image automatically
  # watchtower:
  #     image: ghcr.io/containrrr/watchtower
  #     restart: unless-stopped
  #     command: --cleanup --scope cobalt --interval 900 --include-restarting
  #     volumes:
  #         - /var/run/docker.sock:/var/run/docker.sock

  # if needed, use this image for automatically generating poToken & visitor_data
